1. Declaraci√≥n del puntero
Cuando declaramos un puntero, usamos * para indicar que la variable es un puntero, pero esto no significa que estemos desreferenci√°ndolo en este contexto. Solo estamos diciendo que la variable es un puntero.

int *puntero;  // Declara un puntero a un entero
üìå Clave: Aqu√≠ puntero es solo una variable que almacenar√° una direcci√≥n de memoria, pero todav√≠a no apunta a nada v√°lido.

2. Asignaci√≥n de una direcci√≥n de memoria al puntero
Para hacer que el puntero apunte a un valor, debemos asignarle la direcci√≥n de una variable o reservar memoria din√°micamente.

Ejemplo 1: Apuntar a una variable existente

int x = 10;
puntero = &x;  // Asignamos a 'puntero' la direcci√≥n de 'x'
üìå Clave: puntero almacena la direcci√≥n de x, pero a√∫n no estamos accediendo al valor.

Ejemplo 2: Asignaci√≥n din√°mica en el heap
Si queremos que el puntero apunte a una direcci√≥n de memoria en el heap, usamos new:

puntero = new int(20);  // Asignamos memoria din√°mica y guardamos su direcci√≥n en 'puntero'
üìå Clave: new int(20) crea un entero en el heap con valor 20 y devuelve su direcci√≥n de memoria, que almacenamos en puntero.

3. Desreferenciaci√≥n del puntero
Para acceder al valor almacenado en la direcci√≥n a la que apunta el puntero, usamos * delante del puntero.


std::cout << *puntero << std::endl;  // Desreferenciamos el puntero para obtener el valor
üìå Clave: *puntero nos da el valor almacenado en la direcci√≥n de memoria a la que apunta el puntero.

Ejemplo completo

#include <iostream>

int main() {
    int *puntero;  // Declaramos un puntero (pero a√∫n no apunta a nada)
    
    puntero = new int(30);  // Asignamos memoria din√°mica y guardamos su direcci√≥n en el puntero

    std::cout << "Direccion almacenada en puntero: " << puntero << std::endl;
    std::cout << "Valor almacenado en esa direccion (*puntero): " << *puntero << std::endl;

    delete puntero;  // Liberamos la memoria
    return 0;
}
Salida esperada

Direccion almacenada en puntero: 0x600003f080
Valor almacenado en esa direccion (*puntero): 30
üìå Resumen
Declaramos un puntero: int *puntero; ‚Üí Solo creamos la variable puntero, pero a√∫n no apunta a nada.
Le asignamos una direcci√≥n de memoria: puntero = &x; o puntero = new int(20); ‚Üí Ahora el puntero tiene una direcci√≥n v√°lida.
Desreferenciamos con *puntero para acceder al valor almacenado en esa direcci√≥n.