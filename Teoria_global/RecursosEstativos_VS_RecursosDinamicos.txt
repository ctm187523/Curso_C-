1. Recursos Est치ticos
Los recursos est치ticos son aquellos cuya memoria se asigna en tiempo de compilaci칩n y se libera autom치ticamente cuando el programa termina o cuando salen del 치mbito donde fueron declarados.

Ejemplos de memoria est치tica
1.1 Variables en la pila (stack)
Las variables locales a una funci칩n o bloque se almacenan en la pila (stack) y se liberan autom치ticamente cuando la funci칩n termina.

void funcion() {
    int x = 10;  // Se almacena en la pila (stack)
}  // x se destruye autom치ticamente al salir de la funci칩n
1.2 Variables globales y est치ticas
Las variables globales y las declaradas con static tienen duraci칩n de vida est치tica, lo que significa que existen durante toda la ejecuci칩n del programa.


int global = 5;  // Variable global (existe mientras el programa corre)

void ejemplo() {
    static int contador = 0;  // Se inicializa una vez y persiste entre llamadas
    contador++;
    std::cout << "Contador: " << contador << std::endl;
}
游늷 Claves:

Variables en el stack son r치pidas y se liberan autom치ticamente.
Variables globales y static existen toda la vida del programa.
2. Recursos Din치micos
Los recursos din치micos se asignan en tiempo de ejecuci칩n y requieren que el programador los libere manualmente con delete o delete[].

Ejemplo de memoria din치mica

int* ptr = new int(20);  // Asigna memoria en el heap
std::cout << *ptr << std::endl;
delete ptr;  // Libera la memoria
Ejemplo con arrays din치micos

int* arr = new int[5];  // Asigna un array de 5 enteros en el heap
arr[0] = 10;
std::cout << arr[0] << std::endl;
delete[] arr;  // Liberamos la memoria
游늷 Claves:

Se almacenan en el heap, por lo que la memoria no se libera autom치ticamente.
El programador debe usar delete o delete[] para evitar fugas de memoria.
3. Diferencias clave entre memoria est치tica y din치mica
Caracter칤stica	Recursos Est치ticos (Stack)	Recursos Din치micos (Heap)
Asignaci칩n	En tiempo de compilaci칩n o en la pila	En tiempo de ejecuci칩n en el heap
Liberaci칩n	Autom치tica cuando sale del 치mbito	Manual con delete o delete[]
Velocidad	M치s r치pido	M치s lento (acceso indirecto)
Uso	Variables locales, globales y est치ticas	Objetos y arrays creados con new
Riesgos	Desbordamiento de pila (stack overflow)	Fugas de memoria si no se libera correctamente